/*
 * This file is generated by jOOQ.
 */
package com.github.monosoul.jooq.tables;


import com.github.monosoul.jooq.Public;
import com.github.monosoul.jooq.tables.records.PartitionedTableRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartitionedTable extends TableImpl<PartitionedTableRecord> {

    private static final long serialVersionUID = -1841914959;

    /**
     * The reference instance of <code>public.partitioned_table</code>
     */
    public static final PartitionedTable PARTITIONED_TABLE = new PartitionedTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartitionedTableRecord> getRecordType() {
        return PartitionedTableRecord.class;
    }

    /**
     * The column <code>public.partitioned_table.id</code>.
     */
    public final TableField<PartitionedTableRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.partitioned_table.timestamp</code>.
     */
    public final TableField<PartitionedTableRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.partitioned_table.some_data</code>.
     */
    public final TableField<PartitionedTableRecord, String> SOME_DATA = createField(DSL.name("some_data"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.partitioned_table</code> table reference
     */
    public PartitionedTable() {
        this(DSL.name("partitioned_table"), null);
    }

    /**
     * Create an aliased <code>public.partitioned_table</code> table reference
     */
    public PartitionedTable(String alias) {
        this(DSL.name(alias), PARTITIONED_TABLE);
    }

    /**
     * Create an aliased <code>public.partitioned_table</code> table reference
     */
    public PartitionedTable(Name alias) {
        this(alias, PARTITIONED_TABLE);
    }

    private PartitionedTable(Name alias, Table<PartitionedTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartitionedTable(Name alias, Table<PartitionedTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PartitionedTableRecord> getPrimaryKey() {
        return Internal.createUniqueKey(PartitionedTable.PARTITIONED_TABLE, "SYNTHETIC_PK_partitioned_table", new TableField[] { PartitionedTable.PARTITIONED_TABLE.ID }, true);
    }

    @Override
    public List<UniqueKey<PartitionedTableRecord>> getKeys() {
        return Arrays.<UniqueKey<PartitionedTableRecord>>asList(
              Internal.createUniqueKey(PartitionedTable.PARTITIONED_TABLE, "SYNTHETIC_PK_partitioned_table", new TableField[] { PartitionedTable.PARTITIONED_TABLE.ID }, true)
        );
    }

    @Override
    public PartitionedTable as(String alias) {
        return new PartitionedTable(DSL.name(alias), this);
    }

    @Override
    public PartitionedTable as(Name alias) {
        return new PartitionedTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartitionedTable rename(String name) {
        return new PartitionedTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartitionedTable rename(Name name) {
        return new PartitionedTable(name, null);
    }
}
